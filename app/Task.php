<?php

namespace App;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

/**
 * App\Task
 * @property int                                                           $id
 * @property string                                                        $body
 * @property int                                                           $project_id
 * @property bool                                                          $completed
 * @property \Illuminate\Support\Carbon|null                               $created_at
 * @property \Illuminate\Support\Carbon|null                               $updated_at
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Activity[] $activity
 * @property-read int|null                                                 $activity_count
 * @property-read \App\Project                                             $project
 * @method static Builder|Task newModelQuery()
 * @method static Builder|Task newQuery()
 * @method static Builder|Task query()
 * @method static Builder|Task whereBody($value)
 * @method static Builder|Task whereCompleted($value)
 * @method static Builder|Task whereCreatedAt($value)
 * @method static Builder|Task whereId($value)
 * @method static Builder|Task whereProjectId($value)
 * @method static Builder|Task whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class Task extends Model {

	use RecordsActivity;

	/**
	 * Attributes to guard against mass assignment
	 * @var array
	 */
	protected $guarded = [];

	/**
	 * The relationships that should be touched on save
	 * @var array
	 */
	protected $touches = ['project'];

	/**
	 * Attributes that should be cast to native types
	 * @var array
	 */
	protected $casts = [
		'completed' => 'boolean'
	];

	/**
	 * Events that should trigger new activity
	 * @var array
	 */
	protected static $recordableEvents = ['created', 'deleted'];

	/**
	 * Get the owning project
	 * @return BelongsTo
	 */
	public function project () {
		return $this->belongsTo(Project::class);
	}

	/**
	 * Get the path to the Task
	 * @return string
	 */
	public function path () {
		return "/projects/{$this->project->id}/tasks/{$this->id}";
	}

	/**
	 * Mark the task as complete
	 */
	public function complete () {
		$this->update(['completed' => true]);

		$this->recordActivity('completed_task');
	}

	/**
	 * Mark the task as incomplete
	 */
	public function incomplete () {
		$this->update(['completed' => false]);

		$this->recordActivity('incompleted_task');
	}


	//this is one way to do this, but this has been moved to an observer
//	protected static function boot () {
//
//		parent::boot(); // TODO: Change the autogenerated stub
//
//		static::created(function (Task $task) {
//			$task->project->recordActivity('created_task');
//		});
//
//		self::deleted(function (Task $task){
//			$task->project->recordActivity('deleted_task');
//		});
//
//	}

}
